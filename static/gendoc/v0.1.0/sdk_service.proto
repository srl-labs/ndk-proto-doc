/**********************************************************************************************************************
 *  Description: interface between router agents and SDK service manager
 *
 *  Copyright (c) 2018 Nokia
 ***********************************************************************************************************************/

/**
 *  Network programming APIs and messages. This is the base layer for agent registration, router event notifications such as interface, LLDP, BFD, and so on; also provides keepalive functionality to detect agent liveliness
 */
syntax = "proto3";


package srlinux.sdk;
option go_package = "github.com/nokia/srlinux-ndk-go/ndk";

import "sdk_common.proto";
import "config_service.proto";
import "interface_service.proto";
import "networkinstance_service.proto";
import "route_service.proto";
import "lldp_service.proto";
import "bfd_service.proto";
import "appid_service.proto";
import "nexthop_group_service.proto";

/**
 * Represents base service that defines agent registration, unregistration, notification subscriptions, and keepalive messages.
 */
service SdkMgrService
{
    /// Register agent
    rpc AgentRegister (AgentRegistrationRequest) returns (AgentRegistrationResponse) {}

    /// Unregister agent
    rpc AgentUnRegister (AgentRegistrationRequest) returns (AgentRegistrationResponse) {}

    /// Register for event notifications
    rpc NotificationRegister (NotificationRegisterRequest) returns (NotificationRegisterResponse) {}

    /// Returns current or specific notification subscription details
    rpc NotificationQuery (NotificationQueryRequest) returns (NotificationQueryResponse) {}

    /// Send periodic keepalive message
    rpc KeepAlive(KeepAliveRequest) returns (KeepAliveResponse) {}

    /// Get application name from application identifier
    rpc GetAppId(AppIdRequest) returns (AppIdResponse) {}
}

/**
 * Represents registration request message used in agent register and unregister.
 */
message AgentRegistrationRequest
{
    repeated string js_path = 1;  /* Optional, JSON path formatted strings, which are used in telemetry. Format of js_path follows hierarchical YANG. for example:
                                   * .interface{.name==*}.my_app.
                                   * .my_app.tunnel{.name==*}
                                   * '*'' needs to be replaced with a specific key.
                                   */
    uint32 agent_liveliness = 2; /* Kill this agent unless a keepalive is received within this many seconds.  Value of 0
                                  * means do not monitor this agent for liveliness.
                                  */
}

/**
 * Represents registration response in reply to registration request.
 */
message AgentRegistrationResponse
{
    SdkMgrStatus  status       = 1;  // Status of the register; for example: kOk, kFailed
    string error_str           = 2;  // Detailed error text
    uint32 app_id              = 3;  // Application ID assigned by SDK manager.
}

/**
 * Represents keep alive request from agent to refresh liveliness of the agent.
 */
message KeepAliveRequest
{
}

/**
 * Represents keepalive response.
 */
message KeepAliveResponse
{
    SdkMgrStatus  status       = 1;  // Status of keepalive; for example, kOk or kFailed
}


/**
 * Represents application identifier request from agent. All applications are assigned an identifier by IDB.
 */
message AppIdRequest
{
    string name  = 1;  // Application name
}

/** 
 * Represents application identifier response to agent.
 */
message AppIdResponse
{
    SdkMgrStatus  status       = 1;  // Status of the call; for example, kOk, kFailed
    uint32 id                  = 2;  // Identifier for the given application name
}

/**
 * Represents notification request from agent. Agent uses this message to subscribe to router events such as interface create, delete, or update, as well as LLDP neighbor create, delete, or update, and so on.
 */
message NotificationRegisterRequest
{
    /// Represents notification stream subscription request operation.
    enum Operation
    {
        Create                                        = 0;   // Create a subscription
        Delete                                        = 1;   // Delete all subscriptions
        AddSubscription                               = 2;   // Add subscription to existing subscriptions
        DeleteSubscription                            = 3;   // Delete one subscription from existing subscriptions
    }
    uint64 stream_id                                  = 1;   // Unset on create, set otherwise
    Operation op                                      = 2;   // Specific operation in the notification register request

    uint64 sub_id                                     = 3;   // Set for delete subscription, unset otherwise
    oneof subscription_types
    {
        InterfaceSubscriptionRequest intf             = 10;  // Interface subscription request
        NetworkInstanceSubscriptionRequest nw_inst    = 11;  // Network instance subscription request
        LldpNeighborSubscriptionRequest lldp_neighbor = 12;  // LLDP neighbor subscription request
        ConfigSubscriptionRequest config              = 13;  // Configuration subscription request
        BfdSessionSubscriptionRequest bfd_session     = 14;  // BFD session subscription request
        IpRouteSubscriptionRequest route              = 15;  // IP route subscription request
        AppIdentSubscriptionRequest appid             = 16;  // App identification subscription request
        NextHopGroupSubscriptionRequest nhg           = 17;  // Nexthop Group subscription request
    }
}


/**
 * Represents notification response.
 */
message NotificationRegisterResponse
{
    uint64 stream_id            = 1;  /* Stream identifier. This needs to be passed to the SDK manager for further notification
                                       * subscription changes specific to the current subscription
                                       */
    uint64 sub_id               = 2;  // Subscription identifier. Each subscription gets an identifier, which can be used to delete a subscription
    SdkMgrStatus  status        = 3;  // Status of subscription
}

/**
 * Represents notification query to return specific subscription details.
 */
message NotificationQueryRequest
{
    uint64 stream_id            = 1;  // Stream identifier, in NotificationRegisterResponse
}

/**
 * Represents notification subscription.
 */
message NotificationQuerySubscription
{
    uint64 sub_id               = 1;  // Subscription identifier
    string description          = 2;  // Subscription description
}

/**
 * Represents notification query response.
 */
message NotificationQueryResponse
{
    repeated NotificationQuerySubscription subscriptions = 1;  // List of subscription details
    SdkMgrStatus  status                                 = 2;  // Status of the query
}

/**********************************************************************************************************************
 *  Notification stream protos - this is what streams from the server to the client
 ***********************************************************************************************************************/

/**
 * Represents service for handling notifications.
 */
service SdkNotificationService
{
    /// Send stream of event notifications based on the agent subscriptions
    rpc NotificationStream (NotificationStreamRequest) returns (stream NotificationStreamResponse) {}
}

/**
 * Represents notification stream request.
 */
message NotificationStreamRequest
{
    uint64 stream_id            = 1;  // Stream identifier
}

/**
 * Represents notification stream response.
 */
message Notification
{
    uint64 sub_id                              = 1;  /* Subscription identifier */
    oneof subscription_types
    {
        InterfaceNotification intf             = 10;  // Interface details
        NetworkInstanceNotification nw_inst    = 11;  // Network instance details
        LldpNeighborNotification lldp_neighbor = 12;  // LLDP neighbor details
        ConfigNotification config              = 13;  // Configuration notification
        BfdSessionNotification bfd_session     = 14;  // BFD session details
        IpRouteNotification route              = 15;  // IP route details
        AppIdentNotification appid             = 16;  // App identification details
        NextHopGroupNotification nhg           = 17;  // Next-hop group details
    }
}

/**
 * Represents notification stream response that contains one or more notification.
 */
message NotificationStreamResponse
{
    repeated Notification notification = 1;  /* Notification details */
}
